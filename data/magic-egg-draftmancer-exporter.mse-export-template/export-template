mse version: 2.0.0
short name: Egg MTGA 2.0
full name: Egg MTGA Draft
position hint: 009
icon: icon.png
version: 2018-01-11

depends on:
	package: magic.mse-game
	version: 2008-08-08

game: magic
create directory: true
file type: *.txt|*.txt|*.*|*.*

option field:
	type: choice
	name: export images
	choice: yes
	choice: no
	description: Export images
	
option field:
	type: choice
	name: split dfcs
	choice: yes
	choice: no
	description: Split DFC images

option field:
	type: text
	name: github path
	description: path to your github-hosted image files

option field:
	type: text
	name: rares
	default: 1
	description: number of rares per pack

option field:
	type: text
	name: uncommons
	default: 4
	description: number of uncommons per pack

option field:
	type: text
	name: commons
	default: 7
	description: number of commons per pack
	
option field:
	type: text
	name: wildcards
	default: 2
	description: number of wildcard slots per pack
	
option field:
	type: choice
	name: land slot
	choice: yes
	choice: no
	description: land slot to replace basic lands (add "landslot" to notes of all cards that should be in this slot)

script:
	fix_tm := replace@(match:"™", replace:"TM")
	apos_fix := replace@(match:"’", replace:"'")
	trail_fix := replace@(match:" +$", replace:"")
	clean_names := {trail_fix(apos_fix(remove_tags(input)))}

	apos_strip := replace@(match:"'", replace: "")
	comma_strip := replace@(match:",", replace: "")
	quote_strip := replace@(match:"\"", replace: "")
	remove_sp_chars := { apos_strip(comma_strip(quote_strip(input))) }

	mana_script := 	replace@(match:"(2|H|W|U|B|R|G|S|C)/(W|U|B|R|G|S|C)", replace:{"\{"+_1+"/"+_2+"\}"})+
	replace@(match:"(X|Y|Z|W|U|B|R|G|S|C)", in_context:"(?<!\{)(?<!/)<match>", replace:{"\{"+_1+"\}"})+
	replace@(match:"([1-9][0-9])", in_context:"(?<!\{)(?<!/)<match>", replace:{"\{"+_1+"\}"})+
	replace@(match:"([0-9])", in_context:"(?<!\{)(?<!/)<match>(?!})", replace:{"\{"+_1+"\}"})

	exporter_name_filter := filter_text@(match:"!exporte?r?name [^\n]+")
	exporter_name_grabber := replace@(match:"!exporte?r?name ", replace:"")
	card_name := { 
		test := exporter_name_grabber(exporter_name_filter(card.notes))
		quote_strip(clean_names(if test != "" then test else card.name))
	}
	card_rarity := {
		if card.rarity == "mythic rare" then "mythic" else if card.rarity == "basic land" then "common" else card.rarity
	}
	corrected_card_number := { if exporter_num_grabber(exporter_num_filter(card.notes)) != "" then exporter_num_grabber(exporter_num_filter(card.notes)) else if card.custom_card_number != "" then trim_zeroes(card.custom_card_number) else card_number() }

	write_header := {
		"[CustomCards]" +
		"
		["
	}

	write_card := {
		"\t\{\n\t\t\t\"name\": \"" + card_name() + "\",\n\t\t\t\"rarity\": \"" + card_rarity() + "\",\n\t\t\t\"mana_cost\": \"" + mana_script(card.casting_cost) + "\",\n\t\t\t\"type\": \"" + card.type + "\",\n\t\t\t\"collector_number\": \"" + card_number() + (if contains(card.shape, match:"spli") then "\",\n\t\t\t\"layout\": \"split" else "") + "\",\n\t\t\t\"image_uris\": \{\n\t\t\t\t\"en\": \"" +
		options.github_path + card_name() + (if contains(card.shape, match:"double") then "_front" else "") + ".png\"\n\t\t\t}" +
		( if contains(card.shape, match:"double") then (",\n\t\t\t\"back\": \{\n\t\t\t\t\"name\": \"\",\n\t\t\t\t\"type\": \"\",\n\t\t\t\t\"image_uris\": \{\n\t\t\t\t\t\"en\": \"" + options.github_path + card_name() + "_back.png\"\n\t\t\t\t}\n\t\t\t}\n") else "\n" ) +
		"\t\t},\n\t"
	}
	write_footer := {
		"	]
		"
	}

	write_commons := {
		for each card in cards do if card.rarity == "common" then (if contains(card.type, match:"Token") then "" else (if contains (card.notes, match:"landslot") then "" else "30 "+card_name()+"
			")) else ""
	}

	write_uncommons := {
		for each card in cards do if card.rarity == "uncommon" then if contains (card.notes, match:"landslot") then "" else "9 "+card_name()+"
			" else ""
		
	}

	write_rares := {
		for each card in cards do if card.rarity == "rare" then if contains (card.notes, match:"landslot") then "" else "2 "+card_name()+"
			" else ""
		
	}

	write_mythics := {
		for each card in cards do if card.rarity == "mythic rare" then if contains (card.notes, match:"landslot") then "" else "1 "+card_name()+"
			" else ""
		
	}
	
	write_landslot := {
		for each card in cards do if contains(card.notes, match:"landslot") then "10 " + card_name() + "
			" else ""
	}
	
	write_wildcards := {
		for each card in cards do if contains(card.type, match:"Token") then "" else if card.rarity == "basic land" then "" else "10 " + card_name() + "
		"
	}
	
	write_all_images := {
		for each card in cards do
			if contains(card.shape, match:"double") then write_image_file(crop(input: to_card_image(card), width: 375, height: 523, offset_x: 0, offset_y: 0), file:card_name()+"_front"+".png") + write_image_file(crop(input: to_card_image(card), width: 375, height: 523, offset_x: 377, offset_y: 0), file:card_name()+"_back"+".png")
			else write_image_file(card, file:card_name()+".png")
	}

	write_booster := {
		( if options.rares > 0 then ("[RareSlot(" + options.rares + ")]
		"+ write_rares() + write_mythics()) else "" ) +
		( if options.uncommons > 0 then ("[UncommonSlot(" + options.uncommons + ")]
		"+ write_uncommons()) else "" ) +
		( if options.commons > 0 then ("[CommonSlot(" + options.commons + ")]
		"+ write_commons()) else "" ) +
		( if options.wildcards > 0 then "[WildcardSlot(" + options.wildcards + ")]
		"+ write_wildcards() else "" ) +
		( if options.land_slot == "yes" then "[LandSlot(1)]
		"+ write_landslot() else "" )
	}

	write_images := if options.export_images == "no" then "" else if options.split_dfcs == "yes" then write_all_images() else for each card in cards do write_image_file(card, file:card_name()+".png")
	write_cards := for each card in cards do write_card()
	to_string(to_text(write_header() + write_cards + write_footer() + write_booster()))
